// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: bookmark.sql

package db

import (
	"context"
)

const createBook = `-- name: CreateBook :one
INSERT INTO bookmark(
                     owner_id,
                     title,
                     url
) VALUES($1, $2, $3) RETURNING id, owner_id, title, url, created_at, updated_at
`

type CreateBookParams struct {
	OwnerID int64  `json:"owner_id"`
	Title   string `json:"title"`
	Url     string `json:"url"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Bookmark, error) {
	row := q.db.QueryRowContext(ctx, createBook, arg.OwnerID, arg.Title, arg.Url)
	var i Bookmark
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Title,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBookMark = `-- name: DeleteBookMark :exec
DELETE FROM bookmark WHERE id = $1
`

func (q *Queries) DeleteBookMark(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBookMark, id)
	return err
}

const getAllBookMarks = `-- name: GetAllBookMarks :many
SELECT id, owner_id, title, url, created_at, updated_at FROM bookmark
LIMIT $1
OFFSET $2
`

type GetAllBookMarksParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) GetAllBookMarks(ctx context.Context, arg GetAllBookMarksParams) ([]Bookmark, error) {
	rows, err := q.db.QueryContext(ctx, getAllBookMarks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bookmark
	for rows.Next() {
		var i Bookmark
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Title,
			&i.Url,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookMark = `-- name: GetBookMark :one
SELECT id, owner_id, title, url, created_at, updated_at FROM bookmark
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetBookMark(ctx context.Context, id int64) (Bookmark, error) {
	row := q.db.QueryRowContext(ctx, getBookMark, id)
	var i Bookmark
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Title,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBookmarksByUser = `-- name: GetBookmarksByUser :many
SELECT id, owner_id, title, url, created_at, updated_at FROM bookmark
WHERE owner_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetBookmarksByUser(ctx context.Context, ownerID int64) ([]Bookmark, error) {
	rows, err := q.db.QueryContext(ctx, getBookmarksByUser, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bookmark
	for rows.Next() {
		var i Bookmark
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Title,
			&i.Url,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
