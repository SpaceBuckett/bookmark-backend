// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: userprofile.sql

package db

import (
	"context"
)

const createUserAccount = `-- name: CreateUserAccount :one
INSERT INTO userprofile (
                  username,
                  email,
                  hashed_password
) VALUES ($1, $2, $3) RETURNING id, username, email, hashed_password, created_at
`

type CreateUserAccountParams struct {
	Username       string `json:"username"`
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) CreateUserAccount(ctx context.Context, arg CreateUserAccountParams) (Userprofile, error) {
	row := q.db.QueryRowContext(ctx, createUserAccount, arg.Username, arg.Email, arg.HashedPassword)
	var i Userprofile
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUserAccount = `-- name: DeleteUserAccount :exec
DELETE FROM userprofile
       WHERE id = $1
`

func (q *Queries) DeleteUserAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserAccount, id)
	return err
}

const getAllUserAccounts = `-- name: GetAllUserAccounts :many
SELECT id, username, email, hashed_password, created_at FROM userprofile
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllUserAccountsParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) GetAllUserAccounts(ctx context.Context, arg GetAllUserAccountsParams) ([]Userprofile, error) {
	rows, err := q.db.QueryContext(ctx, getAllUserAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Userprofile
	for rows.Next() {
		var i Userprofile
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.HashedPassword,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserAccount = `-- name: GetUserAccount :one
SELECT id, username, email, hashed_password, created_at FROM userprofile
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserAccount(ctx context.Context, id int64) (Userprofile, error) {
	row := q.db.QueryRowContext(ctx, getUserAccount, id)
	var i Userprofile
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
	)
	return i, err
}
